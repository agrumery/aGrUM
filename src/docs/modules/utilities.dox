/****************************************************************************
 *   This file is part of the aGrUM/pyAgrum library.                        *
 *                                                                          *
 *   Copyright (c) 2005-2025 by                                             *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *                                                                          *
 *   The aGrUM/pyAgrum library is free software; you can redistribute it    *
 *   and/or modify it under the terms of either :                           *
 *                                                                          *
 *    - the GNU Lesser General Public License as published by               *
 *      the Free Software Foundation, either version 3 of the License,      *
 *      or (at your option) any later version,                              *
 *    - the MIT license (MIT),                                              *
 *    - or both in dual license, as here.                                   *
 *                                                                          *
 *   (see https://agrum.gitlab.io/articles/dual-licenses-lgplv3mit.html)    *
 *                                                                          *
 *   This aGrUM/pyAgrum library is distributed in the hope that it will be  *
 *   useful, but WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,          *
 *   INCLUDING BUT NOT LIMITED TO THE WARRANTIES MERCHANTABILITY or FITNESS *
 *   FOR A PARTICULAR PURPOSE  AND NONINFRINGEMENT. IN NO EVENT SHALL THE   *
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER *
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,        *
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  *
 *   OTHER DEALINGS IN THE SOFTWARE.                                        *
 *                                                                          *
 *   See LICENCES for more details.                                         *
 *                                                                          *
 *   SPDX-FileCopyrightText: Copyright 2005-2025                            *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *   SPDX-License-Identifier: LGPL-3.0-or-later OR MIT                      *
 *                                                                          *
 *   Contact  : info_at_agrum_dot_org                                       *
 *   homepage : http://agrum.gitlab.io                                      *
 *   gitlab   : https://gitlab.com/agrumery/agrum                           *
 *                                                                          *
 ****************************************************************************/


/**
 * @file
 * @brief The utility documentation page.
 *
 * @author Pierre-Henri WUILLEMIN(@LIP6) & Christophe GONZALES(@AMU)
 * @author Lionel TORTI
 */

/**
 * \defgroup utilities_group Utilities
 * @{
 * About aGrUM utilities.
 *
 * \defgroup math_group Math
 * @{
 * All the maths you'll need.
 * @}
 *
 * \defgroup configuration_group Configuration
 * @{
 * About aGrUM configuration.
 * @}
 *
 * \defgroup refptr_group Smart Pointers
 * @{
 * RefPtr are a replacement for the usual pointers: they keep track of the
 * number of "smart" pointers pointing to a given element. When an element is
 * no more referenced by any smart pointer, it is deleted. Hence using RefPtr,
 * developers do not have to worry anymore about memory leaks. The correct way
 * to use RefPtr is by creating unnamed temporaries like: @code RefPtr ( new
 * myObject ) @endcode In any case, if you decide to pass a named pointer as
 * argument to a RefPtr, make sure you will do it only once, that it is
 * allocated on the heap and that you never try to deallocate it yourself, else
 * your program will crash.
 *
 * @par Usage example:
 * @code
 * // creation of smart pointer
 * RefPtr<int> ptr1 (new int (4));
 *
 * // copying (and sharing) this pointer into new smart pointers
 * RefPtr<int> ptr2 = ptr1, ptr3;
 * ptr3 = ptr1;
 *
 * // make ptr2 point toward nothing (this does not deallocate int (4) as it is
 * // pointed to by ptr1 and ptr3)
 * ptr2.clear ();
 *
 * // modifying the value pointed to by the dumb pointer contained in ptr1
 * *ptr1 = 5;
 *
 * // print the content of ptr3
 * cerr << *ptr3 << " = 5" << endl;
 *
 * // check whether ptr1 and ptr3 reference the same dumb pointer
 * if (ptr1 == ptr2) cerr << "reference the same dumb pointer" << endl;
 *
 * // check whether ptr1 and ptr2 contain a dumb pointer
 * if (ptr1 && !ptr2) cerr << "check containers" << endl;
 * @endcode
 *
 * @}
 *
 * @}
 */
