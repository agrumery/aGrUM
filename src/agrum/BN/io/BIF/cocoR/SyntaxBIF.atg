/****************************************************************************
 *   This file is part of the aGrUM/pyAgrum library.                        *
 *                                                                          *
 *   Copyright (c) 2005-2025 by                                             *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *                                                                          *
 *   The aGrUM/pyAgrum library is free software; you can redistribute it    *
 *   and/or modify it under the terms of either :                           *
 *                                                                          *
 *    - the GNU Lesser General Public License as published by               *
 *      the Free Software Foundation, either version 3 of the License,      *
 *      or (at your option) any later version,                              *
 *    - the MIT license (MIT),                                              *
 *    - or both in dual license, as here.                                   *
 *                                                                          *
 *   (see https://agrum.gitlab.io/articles/dual-licenses-lgplv3mit.html)    *
 *                                                                          *
 *   This aGrUM/pyAgrum library is distributed in the hope that it will be  *
 *   useful, but WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,          *
 *   INCLUDING BUT NOT LIMITED TO THE WARRANTIES MERCHANTABILITY or FITNESS *
 *   FOR A PARTICULAR PURPOSE  AND NONINFRINGEMENT. IN NO EVENT SHALL THE   *
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER *
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,        *
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  *
 *   OTHER DEALINGS IN THE SOFTWARE.                                        *
 *                                                                          *
 *   See LICENCES for more details.                                         *
 *                                                                          *
 *   SPDX-FileCopyrightText: Copyright 2005-2025                            *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *   SPDX-License-Identifier: LGPL-3.0-or-later OR MIT                      *
 *                                                                          *
 *   Contact  : info_at_agrum_dot_org                                       *
 *   homepage : http://agrum.gitlab.io                                      *
 *   gitlab   : https://gitlab.com/agrumery/agrum                           *
 *                                                                          *
 ****************************************************************************/







#include <agrum/base/core/cast_unicode.h>

#include <agrum/BN/BayesNetFactory.h>

#undef TRY
#define  TRY(inst) try { inst; } catch (gum::Exception& e) { SemErr(e.errorType());}
COMPILER BIF


gum::IBayesNetFactory* factory__;

void setFactory(gum::IBayesNetFactory* f) {
  factory__=f;
}

gum::IBayesNetFactory& factory() {
  if (factory__) return *factory__;
  GUM_ERROR(gum::OperationNotAllowed,"Please set a factory for scanning BIF file...");
}

void SemErr(std::string s) {
  SemErr(widen(s).c_str());
}

void Warning(std::string s) {
  Warning(widen("Warning : "+s).c_str());
}

void checkSizeOfProbabilityAssignation__(const std::vector<float>&v,const std::string& var) {
  gum::Size s=(gum::Size)0;
  TRY(s=factory().varInBN(factory().variableId(var)).domainSize());
  if (v.size()<s)
    Warning("Not enough data in probability assignation for node "+var);
  if (v.size()>s)
    Warning("Too many data in probability assignation for node "+var);
}



//=====================
CHARACTERS
  letter = 'A'..'Z' + 'a'..'z'+ '_' .
  odd_letter = letter - 'e' - 'E'.
  nextletter = letter + '.' + '?' + '-'+'%'.
  digit  = '0'..'9'.

  eol = '\n'.
  inString   = ANY - '"'. /* set of all easy characters within a string */
  nocomma = ANY - ";".


//=====================
TOKENS
  ident  =   ( letter {nextletter | digit} )
            |
            ( digit {digit} odd_letter {nextletter | digit} ).

  integer = [ "+" | "-" ] digit { digit }.              /* integer part */

  number = (
            [ "+" | "-" ] digit { digit }"." digit { digit }              /* digits after the mandatory point */
            [ ( "E" | "e" ) [ "+" | "-" ] digit { digit } ]                 /* optional exponent part */
           |
            [ "+" | "-" ] digit { digit }                 /* integer part */
            ( "E" | "e" ) [ "+" | "-" ] digit { digit }   /* mandatory exponent part */
            )
.

  string = '"' {inString } '"'.

  largestring = '=' {nocomma} ';'.

//=====================
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE '\r' + eol + '\t'

//=====================
PRODUCTIONS

//==============
BIF = NETWORK {SYNC VARIABLE | SYNC PROBA}.

//==============
NETWORK = (.
            std::string name_of_network;
            factory().startNetworkDeclaration();
          .)
  "network" (IDENT<name_of_network> | STRING<name_of_network>) (. factory().addNetworkProperty("name", name_of_network); .)
  '{'
  { PROPERTY }
  '}'                              (. factory().endNetworkDeclaration(); .)
.

//==============
VARIABLE =  (.
              std::string name_of_var;
              std::string name_of_type;
              Size nbrMod;
              factory().startVariableDeclaration();
            .)
  "variable" IDENT<name_of_var> (. TRY( factory().variableName(name_of_var)); .)
  '{'
  { PROPERTY }
  LABELIZE_VAR<nbrMod>  (.
                              TRY(factory().endVariableDeclaration());
                              Size nbr=0;
                              TRY(nbr=factory().varInBN(factory().variableId(name_of_var)).domainSize());
                              if (nbrMod<nbr) SemErr("Too much modalities for variable "+name_of_var);
                              if (nbrMod>nbr) SemErr("Too many modalities for variable "+name_of_var);
                            .)
  { PROPERTY }
  '}'
.

//==============
LABELIZE_VAR<gum::Size& nbrMod> = "type" "discrete" '[' NBR<nbrMod> ']' (. if (nbrMod<=1) SemErr("Not enough modalities for a discrete variable"); .)
  '{' MODALITY_LIST '}' ';'
.

//==============
MODALITY_LIST = (. std::string label; .)
  IDENT_OR_INTEGER<label>    (. TRY(factory().addModality(label)); .)
  [ WEAK "," MODALITY_LIST ]
.

//==============
PROBA =
   "probability"  (.
                std::vector<std::string> var_seq;
                std::string var;
                std::vector<float> proba;
                std::vector<std::string> parents;
                bool error_on_variable=false;
               .)
  '(' IDENT<var> (.
                try { factory().variableId(var); } catch (gum::Exception& e) { error_on_variable=true;SemErr(e.errorType());}
                TRY(factory().startParentsDeclaration(var));
               .)
  [ '|' LISTE_PARENTS<parents> ]
  ')'            (.
  for (Size i=Size(parents.size());i>=Size(1);--i){
    TRY(factory().variableId(parents[i-1]));
    TRY( factory().addParent(parents[i-1]));
  }
  var_seq.push_back(var);
  for (Size i=0;i<Size(parents.size());++i){
    var_seq.push_back(parents[i]);
  }
  TRY(factory().endParentsDeclaration()); .)
  '{'
  { PROPERTY }
  (
    RAW_PROBA<proba>     (.
                          if (! error_on_variable) {
                            TRY(factory().startRawProbabilityDeclaration(var));
                            gum::Size s=(gum::Size)0;
                            TRY(s=factory().cptDomainSize(factory().variableId(var)));
                            if (proba.size()<s) Warning("Not enough data for cpt of node "+var);
                            if (proba.size()>s) Warning("Too many data for cpt of node "+var);
                            TRY(factory().rawConditionalTable(var_seq,proba));
                            TRY(factory().endRawProbabilityDeclaration());
                          }
                        .)
    ';'
    |
    FACTORIZED_PROBA<var,parents>
  )
  '}'
.

//==============
LISTE_PARENTS<. std::vector<std::string>& parents .> = (.std::string parent; .)
  IDENT<parent>         (.
                        parents.push_back(parent);
                       .)
  { ',' IDENT<parent>  (.
                        parents.push_back(parent);
                       .)
  }
.

//==============
RAW_PROBA<. std::vector<float>& v .> =
  "table"              (. v.clear(); .)
  LISTE_FLOAT<v>
.

//==============
FACTORIZED_PROBA<. std::string& var,const std::vector<std::string>& parents .> = (.
                                            TRY(factory().startFactorizedProbabilityDeclaration(var));
                                            .)
  ASSIGNATION<var,parents,true>
  { ASSIGNATION<var,parents,false> }   (. TRY(factory().endFactorizedProbabilityDeclaration()); .)
.

//==============
ASSIGNATION<. const std::string& var,const std::vector<std::string>& parents,bool is_first .> = (.
                                              std::vector<float> v; std::vector<std::string> labels;
                                              .)
  (
    '('                                  (. TRY(factory().startFactorizedEntry()); .)
    LISTE_LABELS<parents,labels,0>
    ')'
    LISTE_FLOAT<v>          (.
                            checkSizeOfProbabilityAssignation__(v,var);
                            TRY(factory().setVariableValuesUnchecked(v));
                            TRY(factory().endFactorizedEntry());
                            .)
  |
    "default"                (. if (! is_first) SemErr("'default' assignation has to be the first."); .)
    LISTE_FLOAT<v>          (.
                              TRY(factory().startFactorizedEntry());
                              checkSizeOfProbabilityAssignation__(v,var);
                              TRY(factory().setVariableValuesUnchecked(v));
                              TRY(factory().endFactorizedEntry());
                            .)
  )
  ';'
.

//==============
LISTE_LABELS<. const std::vector<std::string>& parents,std::vector<std::string>& labels, Idx num_label .> =   (.
                                                                                                    std::string name_of_label;
                                                                                                    .)
  (
    IDENT_OR_INTEGER<name_of_label>                  (.
                                                    labels.push_back(name_of_label);
						    if (num_label>=parents.size()) {
						      SemErr("Too many labels in this assignation");
						    } else {
						      TRY(factory().setParentModality(parents[num_label],name_of_label));
						    }
                                                    .)
    |
    '*'                                              (. labels.push_back("*"); .)
  )
  [ WEAK ',' LISTE_LABELS<parents,labels,num_label+1>]
.

//==============
// no "," for proba values
LISTE_FLOAT<. std::vector<float>& v .> =   (. float value=0.0; .)
  FLOAT<value>                            (. v.push_back(value); .)
  [ [( ',' | '|' )] LISTE_FLOAT<v>]
.

//==============
PROPERTY =            (. std::string name_of_prop,content; float val; .)
  "property" IDENT<name_of_prop>

  ( '=' STRING<content> ';'
    |
     largestring
    | IDENT<content> ';'
    | FLOAT<val> ';'
  )                     (. Warning("Properties are not supported yet"); .)

.

//==============
STRING<std::string& str> = string (. str=narrow(t->val); .).

//==============
IDENT<std::string& name> = ident            (. name=narrow(t->val);  .).

//==============
IDENT_OR_INTEGER<std::string& name> =
  IDENT<name>
  |
  integer    (. name=narrow(t->val);  .)
.

//==============
NBR<gum::Size& val> = integer (. val=coco_atoi(t->val); .).

//==============
FLOAT<float& val> =
  number  (. val=coco_atof(t->val); .)
  |
  integer (. val=float(coco_atoi(t->val)); .)
.


END BIF.
