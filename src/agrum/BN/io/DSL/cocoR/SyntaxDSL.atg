/****************************************************************************
 *   This file is part of the aGrUM/pyAgrum library.                        *
 *                                                                          *
 *   Copyright (c) 2005-2025 by                                             *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *                                                                          *
 *   The aGrUM/pyAgrum library is free software; you can redistribute it    *
 *   and/or modify it under the terms of either :                           *
 *                                                                          *
 *    - the GNU Lesser General Public License as published by               *
 *      the Free Software Foundation, either version 3 of the License,      *
 *      or (at your option) any later version,                              *
 *    - the MIT license (MIT),                                              *
 *    - or both in dual license, as here.                                   *
 *                                                                          *
 *   (see https://agrum.gitlab.io/articles/dual-licenses-lgplv3mit.html)    *
 *                                                                          *
 *   This aGrUM/pyAgrum library is distributed in the hope that it will be  *
 *   useful, but WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,          *
 *   INCLUDING BUT NOT LIMITED TO THE WARRANTIES MERCHANTABILITY or FITNESS *
 *   FOR A PARTICULAR PURPOSE  AND NONINFRINGEMENT. IN NO EVENT SHALL THE   *
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER *
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,        *
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  *
 *   OTHER DEALINGS IN THE SOFTWARE.                                        *
 *                                                                          *
 *   See LICENCES for more details.                                         *
 *                                                                          *
 *   SPDX-FileCopyrightText: Copyright 2005-2025                            *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *   SPDX-License-Identifier: LGPL-3.0-or-later OR MIT                      *
 *                                                                          *
 *   Contact  : info_at_agrum_dot_org                                       *
 *   homepage : http://agrum.gitlab.io                                      *
 *   gitlab   : https://gitlab.com/agrumery/agrum                           *
 *                                                                          *
 ****************************************************************************/







#include <agrum/base/core/cast_unicode.h>

#include <agrum/BN/BayesNetFactory.h>

#undef TRY
#define  TRY(inst) try { inst; } catch (gum::Exception& e) { SemErr(e.errorType());}
COMPILER DSL


gum::IBayesNetFactory* factory__;

void setFactory(gum::IBayesNetFactory* f) {
  factory__=f;
}

gum::IBayesNetFactory& factory() {
  if (factory__) return *factory__;
  GUM_ERROR(gum::OperationNotAllowed,"Please set a factory for scanning DSL file...");
}

void SemErr(std::string s) {
  SemErr(widen(s).c_str());
}

void Warning(std::string s) {
  Warning(widen("Warning : "+s).c_str());
}

void checkSizeOfProbabilityAssignation__(const std::vector<float>&v,const std::string& var, int res) {
  if ((int) v.size()<res)
    Warning("Not enough data in probability assignation for node "+var);
  if ((int) v.size()>res)
    Warning("Too many data in probability assignation for node "+var);
}



//=====================
CHARACTERS
  letter = 'A'..'Z' + 'a'..'z'+ '_' + '='.
  odd_letter = letter - 'e' - 'E'.
  nextletter = letter + '.' + '?' + '-'+'%'.
  digit  = '0'..'9'.

  eol = '\n'.
  inString   = ANY - '"'. /* set of all easy characters within a string */
  nocomma = ANY - ';'.

//=====================
TOKENS
  ident  =   ( letter {nextletter | digit} )
            |
            ( digit {digit} odd_letter {nextletter | digit} ).

  integer = [ "+" | "-" ] digit { digit }.              /* integer part */

  number = (
            [ "+" | "-" ] digit { digit }"." digit { digit }              /* digits after the mandatory point */
            [ ( "E" | "e" ) [ "+" | "-" ] digit { digit } ]                 /* optional exponent part */
           |
            [ "+" | "-" ] digit { digit }                 /* integer part */
            ( "E" | "e" ) [ "+" | "-" ] digit { digit }   /* mandatory exponent part */
            )
.

  string = '"' {inString } '"'.

  largestring = '=' {nocomma} ';'.

//=====================
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE '\r' + eol + '\t' + '='

//=====================
PRODUCTIONS

//==============
DSL = 	(.
           	 	std::string name_of_network;
           	 	factory().startNetworkDeclaration();
          	.)
  "net" (IDENT<name_of_network> | STRING<name_of_network>)
  			(. 	factory().addNetworkProperty("name", name_of_network); .)
  '{'
			(. 	factory().endNetworkDeclaration(); .)
	[HEADER_PART]
	[CREATION_PART]
	[NUM_SAMPLES]
	[SCREEN_PART]
	[WINDOWPOSITION_PART]
	[BK_COLOR]
	[USER_PROPERTIES_PART]
	[DOCUMENTATION_PART]
	[SHOW_AS]
	{NODE}
	[OBSERVATION_COST_PART]
	'}'
	';'
.

NUM_SAMPLES = "NUMSAMPLES" integer ';'.
BK_COLOR= "BKCOLOR" integer ';'.
SHOW_AS = "SHOWAS" integer ';'.

//==============
NODE =	(.
			std::string var;
			std::vector<std::string> parents;
			Size nbrMod = 0;
		.)

	"node" IDENT<var>
	'{'
	"TYPE" ident ';'

	HEADER

	[SCREEN_PART]
	[USER_PROPERTIES_PART]
	[DOCUMENTATION_PART]

	PARENTS<parents>

	VARIABLE_DEFINITION<nbrMod, var,parents>

	[EXTRA_DEFINITION_PART]
	'}'
	';'
.


//============== IGNORED BLOCS ==================
BLOC_PART = '{' { ANY | BLOC_PART } '}' ';'.

//============== IGNORED DLS PARTS (for now ?) ===========
SCREEN_PART = "SCREEN" BLOC_PART.
USER_PROPERTIES_PART = "USER_PROPERTIES" BLOC_PART.
DOCUMENTATION_PART = "DOCUMENTATION" BLOC_PART.
EXTRA_DEFINITION_PART = "EXTRA_DEFINITION" BLOC_PART.
OBSERVATION_COST_PART = "OBSERVATION_COST" BLOC_PART.
HEADER_PART = "HEADER" BLOC_PART.
CREATION_PART = "CREATION" BLOC_PART.
WINDOWPOSITION_PART = "WINDOWPOSITION" BLOC_PART.

//==============
HEADER = (. std::string content; .)
	"HEADER" '{'
		"ID" ident ';'
		"NAME" string ';'
	'}' ';'
.

//==============
PARENTS<. std::vector<std::string>& parents .> =
	"PARENTS" '('
	[ PARENTS_LIST<parents> ]
	')' ';'
.

//==============
PARENTS_LIST<. std::vector<std::string>& parents .> =
	(.
		std::string parent;
	.)

	IDENT<parent> 		(.	parents.push_back(parent);	.)

	{ ',' IDENT<parent> (. parents.push_back(parent); .) }
.

//==============
VARIABLE_DEFINITION<. Size& nbrMod, std::string& var, const std::vector<std::string>& parents .> =
	"DEFINITION" '{'
		"NAMESTATES" '('
									(.
										TRY(factory().startVariableDeclaration());
										TRY(factory().variableName(var));
									.)

			MODALITY_LIST<nbrMod>
		')' ';' (.
			TRY(factory().endVariableDeclaration());
			gum::Size i;
			TRY(factory().startParentsDeclaration(var));

			for(i = 0; i < parents.size(); i++){
					TRY(factory().variableId(parents[i]));
					TRY(factory().addParent(parents[i]));
			}

			TRY(factory().endParentsDeclaration());
		.)

		PROBA<var, parents>
					(.
						Size nbr=0;
						TRY(nbr=factory().varInBN(factory().variableId(var)).domainSize());
						if (nbrMod<nbr) SemErr("Too much modalities for variable "+var);
						if (nbrMod>nbr) SemErr("Too many modalities for variable "+var);
					.)
  '}'
  ';'
.

//==============
MODALITY_LIST<Size& nbrMod> =
								(. std::string label; .)
	IDENT_OR_INTEGER<label>
  							 	(.
									if ((label=="") && (nbrMod == 0)) SemErr("Not enough modalities for a discrete variable");
  									TRY(factory().addModality(label));
  									nbrMod++;
  								.)
	[ "," MODALITY_LIST<nbrMod> ]
.


//==============
PROBA<. const std::string& var, const std::vector<std::string>& parents .> =

	"PROBABILITIES"
	'('
		RAW_PROBA<var, parents>
	')' ';'
.

//==============
RAW_PROBA<. const std::string& var, const std::vector<std::string>& parents .> =
	(.
		std::vector<float> v;
		std::vector<float> prob;
		gum::Size i,j, k;
		gum::Size res, max, nbLabels;

		res = factory().varInBN(factory().variableId(var)).domainSize();

		for(i = 0; i < parents.size(); i++){
			res = res*(factory().varInBN(factory().variableId(parents[i])).domainSize());
		}

		//v.resize(res);
		//prob	.resize(res);

	.)

	FLOAT_LIST<v>

	(.
		nbLabels = factory().varInBN(factory().variableId(var)).domainSize();
		max = res / nbLabels;

		j = 0;
		k = 0;
		for(i = 0; i < res; i++){
			if(i%max == 0){
				prob.push_back(v[k]);
				k++; j=1;
			}
			else{
				prob.push_back(v[j*nbLabels + k-1]);
				j++;
			}
		}

		TRY(factory().startRawProbabilityDeclaration(var));
        gum::Size s=(gum::Size)0;
        TRY(s=factory().cptDomainSize(factory().variableId(var)));
        if ((int)prob.size()<(int)s) {
					Warning("Not enough data for cpt of node "+var);
				}
        if ((int)prob.size()>(int)s) {
					Warning("Too many data for cpt of node "+var);
				}
        TRY(factory().rawConditionalTable(prob));
        TRY(factory().endRawProbabilityDeclaration());

	.)

.

//==============
// no "," for proba values
FLOAT_LIST<. std::vector<float>& v .> =   	(. float value=0.0; .)
	FLOAT<value>  							(. v.push_back(value); .)
	{ [ (',' | '|' )] FLOAT<value> 			(. v.push_back(value); .)
	}
.


//==============
STRING<std::string& str> = string	(. str=narrow(t->val); .).

//==============
IDENT<std::string& name> = ident	(. name=narrow(t->val); .).

//==============
IDENT_OR_INTEGER<std::string& name> =
  IDENT<name>
  |
  integer    (. name=narrow(t->val);.)
.

//==============
FLOAT<float& val> =
  number  (. val=coco_atof(t->val); .)
  |
  integer (. val=float(coco_atoi(t->val)); .)
.



END DSL.
