/****************************************************************************
 *   This file is part of the aGrUM/pyAgrum library.                        *
 *                                                                          *
 *   Copyright (c) 2005-2025 by                                             *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *                                                                          *
 *   The aGrUM/pyAgrum library is free software; you can redistribute it    *
 *   and/or modify it under the terms of either :                           *
 *                                                                          *
 *    - the GNU Lesser General Public License as published by               *
 *      the Free Software Foundation, either version 3 of the License,      *
 *      or (at your option) any later version,                              *
 *    - the MIT license (MIT),                                              *
 *    - or both in dual license, as here.                                   *
 *                                                                          *
 *   (see https://agrum.gitlab.io/articles/dual-licenses-lgplv3mit.html)    *
 *                                                                          *
 *   This aGrUM/pyAgrum library is distributed in the hope that it will be  *
 *   useful, but WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,          *
 *   INCLUDING BUT NOT LIMITED TO THE WARRANTIES MERCHANTABILITY or FITNESS *
 *   FOR A PARTICULAR PURPOSE  AND NONINFRINGEMENT. IN NO EVENT SHALL THE   *
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER *
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,        *
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  *
 *   OTHER DEALINGS IN THE SOFTWARE.                                        *
 *                                                                          *
 *   See LICENCES for more details.                                         *
 *                                                                          *
 *   SPDX-FileCopyrightText: Copyright 2005-2025                            *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *   SPDX-License-Identifier: LGPL-3.0-or-later OR MIT                      *
 *                                                                          *
 *   Contact  : info_at_agrum_dot_org                                       *
 *   homepage : http://agrum.gitlab.io                                      *
 *   gitlab   : https://gitlab.com/agrumery/agrum                           *
 *                                                                          *
 ****************************************************************************/







#include <string>
#include <sstream>
#include <algorithm>
#include <fstream>


#include <agrum/PRM/o3prmr/O3prmrContext.h>

COMPILER o3prmr

gum::prm::o3prmr::O3prmrContext<double> *context__;
gum::prm::o3prmr::O3prmrSession<double> *currentSession__;

void SemErr(std::string s) {
  SemErr(widen(s).c_str());
}

void setO3prmrContext(gum::prm::o3prmr::O3prmrContext<double> *c) {
  context__=c;
}

//=====================
CHARACTERS
  letter = 'A'..'Z' + 'a'..'z'+ '_'.
  digit  = '0'..'9'.
  eol    = '\n'.
  dot    = '.'.

//=====================
TOKENS
  integer     = ['+'|'-'] digit {digit}.
  float       = ['+'|'-'] digit {digit} '.' digit {digit} [ ('E'|'e') ['+'|'-'] digit {digit} ].
  word        = letter { ( letter | digit ) }.
  eol         = '\n'.
  package     = "package".
  import      = "import".
  request     = "request".
  query       = '?'.
  unobserve   = "unobserve".
  engine      = "engine".
  grd_engine  = "grd_engine".
  as          = "as".
  default     = "default".
  and         = "&".

//=====================
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE '\r' + eol + '\t' + ' '

$checkEOF=false // disable the end of file check

//=====================
PRODUCTIONS

//=====================
o3prmr =                 (. std::string s, alias; currentSession__ = 0; .)
  (
    [ package Ident<s>  (. context__->setPackage( s ); .)
    SYNC ';' ]
    {
      import Ident<s>   (. alias = ""; .)
      [ as (
        default         (. alias = "default"; .)
      | word            (. alias = gum::narrow(t->val); .)
      ) ]               (. context__->addImport( t->line, s, alias ); .)
      SYNC ';'
    }
    { RequestBloc }
  |                     (.
                            currentSession__ = new O3prmrSession<double>("default");
                            context__->addSession( *currentSession__ );
                        .)
    Command
  ).

RequestBloc = request word  (. currentSession__ = new O3prmrSession<double>(gum::narrow(t->val)); .)
              '{' {
                    Command
              } SYNC '}'         (. context__->addSession( *currentSession__ ); currentSession__ = nullptr; .)
              .

Command = ( Observe |
            Unobserve |
            Query |
            SetEngine |
            SetGrdEngine ) .

//=====================
Observe =   (. std::string left_value, right_value; .)
          IdentArray<left_value> '='(
            word (. right_value = gum::narrow(t->val); .)
            | float (. right_value = std::to_string(coco_atof(t->val)); .)
            | integer (. right_value = std::to_string(coco_atoi(t->val)); .)
          )
          ';' (. currentSession__->addObserve(t->line, left_value, right_value); .) .

//=====================
Unobserve = unobserve (. std::string s; .)
            IdentArray<s> (. currentSession__->addUnobserve( t->line, s ); .)
            ';'
            .

//=====================
Query = '?'       (. std::string s; .)
        IdentArray<s>  (. currentSession__->addQuery( t->line, s ); .)
        { and
        IdentArray<s>  (. currentSession__->addQuery( t->line, s ); .)
        }
        ';'
        .

//=====================
SetEngine = engine ( "SVED" | "SVE" | "GRD" ) (. currentSession__->addSetEngine( t->line, gum::narrow(t->val) ); .) ';'.

//=====================
SetGrdEngine = grd_engine ( "VE" | "VEBB" | "lazy" ) (. currentSession__->addSetGndEngine( t->line, gum::narrow(t->val) ); .) ';'.

//=====================
Ident<std::string& s> =             (. std::stringstream sBuff; .)
                        word        (. sBuff << narrow(t->val); .)
                        {
                          '.' word  (. sBuff << "." << narrow(t->val); .)
                        }           (. s = sBuff.str(); .)
                        .

IdentArray<std::string& s> = (. std::stringstream sBuff; .)
        word                 (. sBuff << narrow(t->val); .)
        [ '[' integer        (. sBuff << '[' << narrow(t->val) << ']'; .)
        ']' ]
        {
          '.' word           (. sBuff << "." << narrow(t->val); .)
          [ '[' integer      (. sBuff << '[' << narrow(t->val) << ']'; .)
          ']' ]
        }                    (. s = sBuff.str(); .)
        .

END o3prmr.
