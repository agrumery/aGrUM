/****************************************************************************
 *   This file is part of the aGrUM/pyAgrum library.                        *
 *                                                                          *
 *   Copyright (c) 2005-2025 by                                             *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *                                                                          *
 *   The aGrUM/pyAgrum library is free software; you can redistribute it    *
 *   and/or modify it under the terms of either :                           *
 *                                                                          *
 *    - the GNU Lesser General Public License as published by               *
 *      the Free Software Foundation, either version 3 of the License,      *
 *      or (at your option) any later version,                              *
 *    - the MIT license (MIT),                                              *
 *    - or both in dual license, as here.                                   *
 *                                                                          *
 *   (see https://agrum.gitlab.io/articles/dual-licenses-lgplv3mit.html)    *
 *                                                                          *
 *   This aGrUM/pyAgrum library is distributed in the hope that it will be  *
 *   useful, but WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,          *
 *   INCLUDING BUT NOT LIMITED TO THE WARRANTIES MERCHANTABILITY or FITNESS *
 *   FOR A PARTICULAR PURPOSE  AND NONINFRINGEMENT. IN NO EVENT SHALL THE   *
 *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER *
 *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,        *
 *   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  *
 *   OTHER DEALINGS IN THE SOFTWARE.                                        *
 *                                                                          *
 *   See LICENCES for more details.                                         *
 *                                                                          *
 *   SPDX-FileCopyrightText: Copyright 2005-2025                            *
 *       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 *
 *       - Christophe GONZALES(_at_AMU)                                     *
 *   SPDX-License-Identifier: LGPL-3.0-or-later OR MIT                      *
 *                                                                          *
 *   Contact  : info_at_agrum_dot_org                                       *
 *   homepage : http://agrum.gitlab.io                                      *
 *   gitlab   : https://gitlab.com/agrumery/agrum                           *
 *                                                                          *
 ****************************************************************************/







// =====================================================================
#include <agrum/base/core/cast_unicode.h>
// =====================================================================
#include <agrum/FMDP/IfmdpFactory.h>
// =====================================================================
#undef TRY
#define  TRY(inst) try { inst; } catch (gum::Exception& e) { SemErr(e.errorType());}
// =====================================================================


// ===================================================================================================
// DECLARATION
// ===================================================================================================
COMPILER MDPDAT

        // *************************************************************************************
        // Needed attributes
        // *************************************************************************************

                /// the FMDP factory to build it
                gum::AbstractFMDPFactory* factory__;

                /// for each transition diagram, we need to know the associated variable
                std::string currentFunctionGraphVar__;

                /// for building the diagram, we need to keep track of var parents
                std::vector< gum::NodeId > parentNode__;

                /// and current modality
                std::vector< gum::Idx > parentModality__;


        // *************************************************************************************
        // Getters and Setters on those attributes
        // *************************************************************************************

                /// Sets the main factory
                void setFactory( gum::AbstractFMDPFactory* f ) {
                        factory__ = f;
                }

                gum::AbstractFMDPFactory& factory() {
                  if (factory__)
                        return *factory__;
                  GUM_ERROR(gum::OperationNotAllowed,"Please set a factory for scanning BIF file...");
                }

                bool IsFollowedByIdent() {
                        Token* next = scanner->Peek();
                        return la->kind == _lpar && next->kind == _ident;
                }

                void SemErr(std::string s) {
                  SemErr(widen(s).c_str());
                }

                void Warning(std::string s) {
                  Warning(widen("Warning : "+s).c_str());
                }



// ===================================================================================================
// CHARACTERS DEFINITION
// ===================================================================================================
CHARACTERS
        letter = 'A'..'Z' + 'a'..'z'+ '_' .
        odd_letter = letter - 'e' - 'E'.
        nextletter = letter + '.' + '?' + '-'+'%'.
        digit  = '0'..'9'.

        eol = '\n'.
        inString   = ANY - '"'. /* set of all easy characters within a string */
        nocomma = ANY - ";".


// ===================================================================================================
// TOKENS DEFINITION
// ===================================================================================================
TOKENS
        operand = "+" | "-" | "*" | "/" .

        ident  =        ( letter {nextletter | digit} )
                                |
                                ( digit {digit} odd_letter {nextletter | digit} ).

        integer = [ "+" | "-" ] digit { digit }.              /* integer part */

        number =         (
                                [ "+" | "-" ] digit { digit }"." digit { digit }              /* digits after the mandatory point */
                                [ ( "E" | "e" ) [ "+" | "-" ] digit { digit } ]                 /* optional exponent part */
                                |
                                [ "+" | "-" ] digit { digit }                 /* integer part */
                                ( "E" | "e" ) [ "+" | "-" ] digit { digit }   /* mandatory exponent part */
                                )
        .

        string = '"' {inString } '"'.

        largestring = '=' {nocomma} ';'.

        lpar = '('.




// ===================================================================================================
// MISCELLEANOUS DEFINITION
// ===================================================================================================
COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO eol

IGNORE '\r' + eol + '\t'


// ===================================================================================================
// PRODUCTION RULES
// ===================================================================================================
PRODUCTIONS

        /// *************************************************************************************
        /// Main rule
        /// *************************************************************************************
        MDPDAT =
                        VARIABLES_DECLARATION
                        { ACTION }
                        REWARD_FUNCTION_GRAPH
                        DISCOUNT
                        TOLERANCE
                        .


        /// *************************************************************************************
        /// Variables declaration rule
        /// *************************************************************************************
        VARIABLES_DECLARATION = '(' "variables" { VARIABLE } ')'.


        /// *************************************************************************************
        /// Variable rule
        /// *************************************************************************************
        VARIABLE =                          (. std::string name_of_var; .)
                '('                         (. factory__->startVariableDeclaration(); .)
                IDENT<name_of_var>          (. TRY( factory__->variableName( name_of_var ) ); .)
                MODALITY_LIST
                ')'                         (. TRY( factory__->endVariableDeclaration() ); .)
                .

        /// *************************************************************************************
        /// Modality List rule
        /// *************************************************************************************
        MODALITY_LIST =                     (. std::string label; .)
                IDENT_OR_INTEGER<label>     (. TRY( factory__->addModality( label ) ); .)
                [ MODALITY_LIST ]
                .


        /// *************************************************************************************
        /// Action declaration rule
        /// *************************************************************************************
        ACTION =                                                    (. std::string name_of_action;
                                                                       float tolerance; .)
                "action"                                            (. factory__->startActionDeclaration(); .)
                (IDENT<name_of_action> | STRING<name_of_action>)    (. TRY( factory__->addAction( name_of_action ) ); .)
                [ FLOAT<tolerance> ]
                { TRANSITION_FUNCTION_GRAPH }
                [ COST_FUNCTION_GRAPH ]
                "endaction"                                         (. TRY( factory__->endActionDeclaration() ); .)
                .

        /// *************************************************************************************
        /// Transition Function Graph main rule
        /// *************************************************************************************
        TRANSITION_FUNCTION_GRAPH =             (. std::string name_of_var;
                                                                             factory__->startTransitionDeclaration(); .)
                IDENT<name_of_var>                        (. std::string prime_name_of_var = name_of_var + "'";
                                                                             currentFunctionGraphVar__ = prime_name_of_var; .)
                ( IF( IsFollowedByIdent() )
                '(' SUB_TRANSITION_FUNCTION_GRAPH ')' |  '(' TRANSITION_LEAF ')' )
                                                                         (. TRY( factory__->addTransition( name_of_var ) );
                                                                            factory__->endTransitionDeclaration();
                                                                            parentModality__.clear();
                                                                            parentNode__.clear(); .)
                .

        /// *************************************************************************************
        /// Transition Function Graph recursion rule
        /// *************************************************************************************
        SUB_TRANSITION_FUNCTION_GRAPH =           (. std::string name_of_var;
                                                       std::string modality_of_var;
                                                       NodeId var_id; .)
                IDENT<name_of_var>                  (. var_id = factory__->addInternalNode( name_of_var );
                                                       if( !parentNode__.empty() )
                                                         factory__->addArc( parentNode__.back(), var_id, parentModality__.back() );
                                                       else
                                                         factory__->setRoot(var_id); .)
                {'('
                IDENT_OR_INTEGER<modality_of_var>                  (. parentNode__.push_back( var_id );
                                                                                               parentModality__.push_back( (* (factory__->variable( name_of_var )))[modality_of_var] ); .)
                ( IF( IsFollowedByIdent() )
                '(' SUB_TRANSITION_FUNCTION_GRAPH ')' |  '(' TRANSITION_LEAF ')' )
                                                                                            (. parentModality__.pop_back(); .)
                ')'}                                                                       (. parentNode__.pop_back(); .)
                .

        /// *************************************************************************************
        /// Transition diagram leaf rule
        /// *************************************************************************************
        TRANSITION_LEAF =       (. float value=0.0;
                                   gum::Idx i = 0;
                                   NodeId var_id = factory__->addInternalNode( currentFunctionGraphVar__ );
                                   if( !parentNode__.empty() )
                                      factory__->addArc( parentNode__.back(), var_id, parentModality__.back() );
                                   else
                                     factory__->setRoot(var_id); .)
                FLOAT<value>    (. NodeId val_id = factory__->addTerminalNode( value );
                                   factory__->addArc( var_id, val_id, i ); .)
                {
                FLOAT<value>                 (. ++i;
                                                           val_id = factory__->addTerminalNode( value );
                                                          factory__->addArc( var_id, val_id, i ); .)
                }
                .

        /// *************************************************************************************
        /// Cost Function Graph main rule
        /// *************************************************************************************
        COST_FUNCTION_GRAPH =         (. std::string name_of_var;
                                                               factory__->startCostDeclaration(); .)
                "cost"
                '('
                SUB_FUNCTION_GRAPH
                ')'                                        (. TRY( factory__->addCost( ) );
                                                              factory__->endCostDeclaration();
                                                              parentModality__.clear();
                                                              parentNode__.clear(); .)
                .

        /// *************************************************************************************
        /// Reward Function Graph main rule
        /// *************************************************************************************
        REWARD_FUNCTION_GRAPH =                               (. std::string name_of_var;
                                                                                          factory__->startRewardDeclaration(); .)
                "reward"
		(
                ( IF( IsFollowedByIdent() )
                '(' SUB_FUNCTION_GRAPH ')' |  '(' LEAF ')' )    (.  TRY( factory__->addReward( ) );
                                                                                        parentModality__.clear();
                                                                                        parentNode__.clear(); .)
		|
		'['                                                                   (. std::string operand_type; .)
		OPERAND<operand_type>                            (.  factory__->setOperationModeOn( operand_type );.)
                ( IF( IsFollowedByIdent() )
                '(' SUB_FUNCTION_GRAPH ')' |  '(' LEAF ')' )   (. TRY( factory__->addReward( ) );
                                                                                        parentModality__.clear();
                                                                                        parentNode__.clear(); .)
		{
                ( IF( IsFollowedByIdent() )
                '(' SUB_FUNCTION_GRAPH ')' |  '(' LEAF ')' )   (. TRY( factory__->addReward( ) );
                                                                                        parentModality__.clear();
                                                                                        parentNode__.clear(); .)
		}
		']'
		)                                                                   (. factory__->endRewardDeclaration(); .)
		.

        /// *************************************************************************************
        /// Function Graph recursion rule
        /// *************************************************************************************
        SUB_FUNCTION_GRAPH =                      (. std::string name_of_var;
                                                       std::string modality_of_var;
                                                       NodeId var_id;.)
                IDENT<name_of_var>                  (. var_id = factory__->addInternalNode( name_of_var );
                                                       if( !parentNode__.empty() )
                                                         factory__->addArc( parentNode__.back(), var_id, parentModality__.back() );
                                                       else
                                                       factory__->setRoot(var_id); .)
                {'('
                IDENT_OR_INTEGER<modality_of_var>                (. parentNode__.push_back( var_id );
                                                                                             parentModality__.push_back( (* (factory__->variable( name_of_var )))[modality_of_var] );  .)
                ( IF( IsFollowedByIdent() )
                '(' SUB_FUNCTION_GRAPH ')' |  '(' LEAF ')' )
                                                                                          (. parentModality__.pop_back(); .)
                ')'}                                                                     (. parentNode__.pop_back(); .)
                .

        /// *************************************************************************************
        /// Graph leaf rule
        /// *************************************************************************************
        LEAF =                            (. float value=0.0; .)
                FLOAT<value>         (. NodeId val_id = factory__->addTerminalNode( value );
                                                  factory__->addArc( parentNode__.back(), val_id, parentModality__.back() ); .)
                        {
                FLOAT<value>         (. NodeId val_id = factory__->addTerminalNode( value );
                                                   factory__->addArc( parentNode__.back(), val_id, parentModality__.back() ); .)
                }
                .

        /// *************************************************************************************
        /// Graph leaf rule
        /// *************************************************************************************
        DISCOUNT =                         (. float value=0.0;
                                                       factory__->startDiscountDeclaration( ); .)
                        "discount"
                        FLOAT<value>     (. factory__->addDiscount( value );
                                                       factory__->endDiscountDeclaration( ); .)
                        .

        /// *************************************************************************************
        /// Graph leaf rule
        /// *************************************************************************************
        TOLERANCE =                         (. float value=0.0; .)
                        "tolerance"
                        FLOAT<value>
                        .

        /// *************************************************************************************
        /// String rule
        /// *************************************************************************************
        STRING<std::string& str> =
                        string        (. str=narrow(t->val); .).

        /// *************************************************************************************
        /// Identifier rule
        /// *************************************************************************************
        IDENT<std::string& name> =
                        ident        (. name=narrow(t->val);  .).

        /// *************************************************************************************
        /// Identifier or integer rule
        /// *************************************************************************************
        IDENT_OR_INTEGER<std::string& name> =
                        IDENT<name>
                        |
                        integer                (. name=narrow(t->val);  .)
                        .

        /// *************************************************************************************
        /// Float rule
        /// *************************************************************************************
        FLOAT<float& val> =
                        number        (. val=coco_atof(t->val); .)
                        |
                        integer        (. val=float(coco_atoi(t->val)); .)
                        .

        /// *************************************************************************************
        /// Float rule
        /// *************************************************************************************
        OPERAND<std::string& op> =
                        operand        (. op=narrow(t->val); .)
                        .


END MDPDAT.
