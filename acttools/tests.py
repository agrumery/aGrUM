############################################################################
#   This file is part of the aGrUM/pyAgrum library.                        #
#                                                                          #
#   Copyright (c) 2005-2025 by                                             #
#       - Pierre-Henri WUILLEMIN(_at_LIP6)                                 #
#       - Christophe GONZALES(_at_AMU)                                     #
#                                                                          #
#   The aGrUM/pyAgrum library is free software; you can redistribute it    #
#   and/or modify it under the terms of either :                           #
#                                                                          #
#    - the GNU Lesser General Public License as published by               #
#      the Free Software Foundation, either version 3 of the License,      #
#      or (at your option) any later version,                              #
#    - the MIT license (MIT),                                              #
#    - or both in dual license, as here.                                   #
#                                                                          #
#   (see https://agrum.gitlab.io/articles/dual-licenses-lgplv3mit.html)    #
#                                                                          #
#   This aGrUM/pyAgrum library is distributed in the hope that it will be  #
#   useful, but WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,          #
#   INCLUDING BUT NOT LIMITED TO THE WARRANTIES MERCHANTABILITY or FITNESS #
#   FOR A PARTICULAR PURPOSE  AND NONINFRINGEMENT. IN NO EVENT SHALL THE   #
#   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER #
#   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,        #
#   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR  #
#   OTHER DEALINGS IN THE SOFTWARE.                                        #
#                                                                          #
#   See the GNU Lesser General Public License (LICENSE.LGPL) and the MIT   #
#   licence (LICENSE.MIT) for more details.                                #
#                                                                          #
#   Contact  : info_at_agrum_dot_org                                       #
#   homepage : http://agrum.gitlab.io                                      #
#   gitlab   : https://gitlab.com/agrumery/agrum                           #
#                                                                          #
############################################################################

import glob
import os
import sys
from datetime import datetime

from .configuration import cfg
from .utils import notif, setifyString, CrossPlatformRelPath, critic


def checkTests(current: dict[str, str]):
  cde = current["tests"]
  if cde == "quick" and "aGrUM" in current["targets"]:
    current["tests"] = "all"
    current["modules"] = "BASE+BN"
    cde = "all"

  alltests = allTests(setifyString("+".join(cfg.modules)))
  writeTestList(alltests)
  if cde == "all" or cde == "quick":
    return alltests
  elif cde == "list":
    printTests(current)
    sys.exit(0)
  else:
    return checkTestList(current, alltests)


def checkAndWriteTests(current: dict[str, str]):
  writeTestList(checkTests(current))


def checkTestList(current: dict[str, str], alltests):
  res = []
  for ss in setifyString(current["tests"]):
    s = "/" + ss + "TestSuite.h"
    name = ""
    if "aGrUM" not in current["targets"]:
      break
    for tryfile in alltests:
      if tryfile.endswith(s):
        name = tryfile
        break
    if name == "":
      if ss != "show" and ss != "quick" and current["action"] == "test":
        printTests(current)
        critic('Test "src/testunits/[module]/' + ss + 'TestSuite.h" does not exist for the selected modules')
    else:
      res.append(name)
  return res


def writeTestList(l):
  l.sort(key=lambda s: s.split("/")[-1])
  today = datetime.now()
  f = open("src/testunits/testList.cmake", "w")
  f.write("# file automatically generated by act\n")
  f.write("# " + today.strftime("%A, %d. %B %Y %H:%M") + "\n")
  f.write("# do not change it\n")
  f.write("set(AGRUM_TESTS \n  ")
  f.write("\n  ".join(l))
  f.write("\n)\n")
  f.close()
  f = open("src/testunits/testList.all", "w")
  f.write("# file automatically generated by act\n")
  f.write("# " + today.strftime("%A, %d. %B %Y %H:%M") + "\n")
  f.write("# do not change it\n")
  f.write("set(AGRUM_TESTS \n  ")
  f.write("\n  ".join(l))
  f.write("\n)\n")
  f.close()


def allTests(moduleset):
  s = []

  for x in moduleset:
    s += [
      CrossPlatformRelPath(x, "src/testunits") for x in glob.glob("src/testunits/module_" + x.upper() + "/*TestSuite.h")
    ]

  return s


def testNames(testsList):
  return [s.split("/")[-1].split("TestSuite")[0] for s in testsList]


def checkTestListCmake(current: dict[str, str]):
  if not os.path.exists("src/testunits/testList.cmake"):
    writeTestList(allTests(current["modules"]))
  else:
    with open("src/testunits/testList.cmake") as f:
      content = f.readlines()

    res = []
    rewrite = False
    for line in content:
      if line[0:2] == "  ":
        s = line.strip()
        if not os.path.exists("src/testunits/" + s):
          notif("Test " + s[:-11] + " (src/testunits/" + s + ") does not exist => removing it from tests list")
          rewrite = True
        else:
          res.append(s)
    if rewrite:
      writeTestList(res)


def printTestsForModule(m):
  print("=" * (2 + len(m)))
  print(" " + m + " ")
  print("=" * (2 + len(m)))

  l = testNames(allTests({m}))

  w = max([len(x) for x in l])
  nbr = 80 / w
  i = 0
  for s in sorted(l):
    print(s.ljust(w), end="\t")
    i += 1
    if i > nbr:
      i = 0
      print("")
  if i != 0:
    print("")
  print("")


def printTests(current: dict[str, str]):
  for modul in setifyString(current["modules"]):
    printTestsForModule(modul)
